/*//GEN-LINE:variables
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.jpedal.netbeans;

import java.awt.BorderLayout;
import java.util.Properties;
import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Scene;
import javax.swing.SwingUtilities;
import org.jpedal.examples.baseviewer.BaseViewerFX;
import org.jpedal.external.PluginHandler;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import java.io.FileNotFoundException;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.jpedal.netbeans//PDFDisplay//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "PDFDisplayTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.jpedal.netbeans.PDFDisplayTopComponent")
//@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_PDFDisplayAction",
        preferredID = "PDFDisplayTopComponent"
)
@Messages({
    "CTL_PDFDisplayAction=PDFDisplay",
    "CTL_PDFDisplayTopComponent=PDFDisplay Window",
    "HINT_PDFDisplayTopComponent=This is a PDFDisplay window"
})
public final class PDFDisplayTopComponent extends TopComponent {

    BaseViewerFX viewer;

    String PDFfile=null;

    JFXPanel fxPanel = new JFXPanel();

    public PDFDisplayTopComponent() {

        initComponents();
        setName(Bundle.CTL_PDFDisplayTopComponent());
        setToolTipText(Bundle.HINT_PDFDisplayTopComponent());
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);

    }
    
    public PDFDisplayTopComponent(String file){

        this();

        PDFfile = file;

        this.setDisplayName(file);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>                        

    // Variables declaration - do not modify                     
    // End of variables declaration  
     @Override
    public void componentOpened() {
        
    }
    
    boolean isSetup=false;
    
    @Override
    public void componentActivated() {

        if(!isSetup){
            isSetup=true;
        
            this.setLayout(new BorderLayout());
            this.add(fxPanel, BorderLayout.CENTER);

            Platform.setImplicitExit(false);
            Platform.runLater(new Runnable() {
                @Override
                public void run() {
                    try {
                        initFX();
                    } catch (FileNotFoundException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                    }
            });
        }
    }

    private void initFX() throws FileNotFoundException {

        //get name of file which is displayed on title of panel
        String newPDFfile=this.getDisplayName();

        if(newPDFfile!=null){
            PDFfile=newPDFfile;
        }

        viewer = new BaseViewerFX();

        Scene scene = viewer.setupViewer(this.getBounds().width, this.getBounds().height);

        viewer.addListeners();

        fxPanel.setScene(scene);

        if(PDFfile!=null){

            try {
                viewer.loadPDF(PDFfile);
            } catch (Exception ex) {
                Exceptions.printStackTrace(ex);
            }
        }
        
        //allow update of page title as PDF file
        viewer.addExternalHandler(new PluginCallBackHandler(this));

    }

    @Override
    public void componentClosed() {
    }

    /**
     * Called when IDE is closed but plugin is left open.
     * Purpose is to save plugins last open state.
     * @param p is of type Properties
     */
    void writeProperties(Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.1");
        // TODO store your settings

        //Save the PDF path to property value "file"
        if(this.getDisplayName()!=null){
            p.setProperty("file", this.getDisplayName());
        }
        
    }

    /**
     * Called if plugin was left open when IDE was closed.
     * Purpose is to load plugin from its last state.
     * @param p is of type Properties
     */
    void readProperties(Properties p) {

        String version = p.getProperty("version");
        // TODO read your settings according to their version

        //new code for PDF plugin to restore
        String previousPDFfile = p.getProperty("file");
        
        if (previousPDFfile != null) {
            PDFfile = previousPDFfile;

            this.setDisplayName(PDFfile);
        }
    }

    public class PluginCallBackHandler implements PluginHandler  {

        PDFDisplayTopComponent handler;

        public PluginCallBackHandler(PDFDisplayTopComponent handler) {
            this.handler=handler;
        }

        @Override
        public void setFileName(final String string) {

            if (SwingUtilities.isEventDispatchThread()){ //remember this is Swing and not FX
                handler.setName(string);
                handler.setDisplayName(string);
            }else {
                final Runnable doPaintComponent = new Runnable() {
                    @Override
                    public void run() {
                        handler.setName(string);
                        handler.setDisplayName(string);
                    }
                };
                SwingUtilities.invokeLater(doPaintComponent);
            }
           
        }
    }
}
